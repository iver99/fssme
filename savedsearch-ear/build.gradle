apply plugin: 'ear'
apply plugin: 'eclipse-wtp'

configurations { 
    appServer     
}

version = project.ext.getServiceVersion("SavedSearchService")
group = 'emaas/applications/savedsearch-framework'

def artifactId = appName 
def groupId = group 
def versionNumber = version

ear 
{
	libDirName 'lib'
	appDirName 'EarContent'
	baseName = archiveBaseName
	from('ear/META-INF')
	{ 
		include 'ear/META-INF/*.xml'
		into('META-INF') 
	}
}

dependencies 
{
	deploy (project(path:':savedsearch-web', configuration:'archives')) {transitive = false}

	earlib (project(':savedsearch-core')){transitive = false}
	earlib (project(':savedsearch-entities')){transitive = false}
	earlib (project(':savedsearch-web-utils')){transitive = false} 
	earlib(group: 'com.oracle.emaas.emcpsm', name: 'registry-lookup-client', version: '1.0.0+') {transitive=false }
	earlib(group: 'com.oracle.emaas.emcpsm', name: 'registry-client', version: '1.0.0+') {transitive=false }
        earlib(group: 'org.apache.zookeeper', name:'zookeeper', version:'3.4.6') {transitive=false }
        earlib(group: 'com.oracle.emaas', name: 'emaas-platform-tenant-sdk', version: '0.2') {transitive=false }
        earlib(group: 'org.apache.httpcomponents', name:'httpclient', version:'4.3.1')
        earlib(group: 'org.apache.httpcomponents', name:'httpcore', version:'4.3')
        earlib(group: 'org.apache.httpcomponents', name:'httpmime', version:'4.3.1')
        earlib(group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.0.1') {transitive=false }
        earlib(group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.0.1') {transitive=false }
        earlib(group: 'org.apache.logging.log4j', name: 'log4j-web', version: '2.0') {transitive=false }	
//	earlib (group: 'log4j', name: 'log4j', version: '1.2.17') {transitive=false }
}

// All WLS Related things

loadConfiguration()

def loadConfiguration() {

    def environment = hasProperty('env') ? env : 'dev'
    setProperty 'environment', environment
    
    def configFile = file('../appServerConfig.config')
    def appServerconfig = new ConfigSlurper(environment).parse(configFile.toURL())
    setProperty 'appServerconfig', appServerconfig
}

task appServerInit << {

	println "=============== Environment is $environment ========================"
	println " "
	println "(Un/Re)Deployment will be performed at following server info: "
	println "	serverName:  $appServerconfig.serverName"
	println "	port:  $appServerconfig.port"
  println "	adminuser:  $appServerconfig.adminUser"
	println "	adminuserpwd: $appServerconfig.adminUserPwd"
	println " "

	dependencies 
	{
		appServer (group: 'com.oracle.weblogic', name: 'wlfullclient', version: '12.1.2-0-0')
	} 
	if (!project.hasProperty('serverHost')) { 
		project.ext.serverHost = "$appServerconfig.serverName"; 
	} 
	if (!project.hasProperty('adminServerPost')) { 
		project.ext.adminServerPost = "$appServerconfig.port"; 
	}     
	if (!project.hasProperty('adminUser')) { 
		project.ext.adminUser = "$appServerconfig.adminUser"; 
	}     
	if (!project.hasProperty('adminUserPassword')) { 
		project.ext.adminUserPassword = "$appServerconfig.adminUserPwd"; 
	}     

	project.ext.t3URL = "t3://${serverHost}:${adminServerPost}" 
	
	ant.propertyfile(file: "../savedsearch-web/testenv.properties") 
	{
		entry( key:"hostname",  value: "${serverHost}" )
		entry( key: "port", value: "${appServerconfig.port}")
	}

	ant.taskdef(name: 'wldeploy',classname: 'weblogic.ant.taskdefs.management.WLDeploy',classpath: configurations.appServer.asPath)  
} 

task appServerDeploy{
	dependsOn 'ear', 'appServerInit'

	doLast 
	{ 
		println "Deploying ${ear.archivePath} to ${t3URL}" 

		ant.wldeploy(action:'deploy',  
		source:     ear.archivePath, 
		targets:	'Server-6',
		name:       "SavedSearchService-6",
		adminurl:   t3URL,  
		user:       adminUser, 
		password:   adminUserPassword, 
		upload:     'true',  
		verbose:    'true', 
		debug:      'false') 
	} 
}


task appServerUndeploy{
	dependsOn 'appServerInit' 

	doLast 
	{ 
		println "Undeploying ${appName} from ${t3URL}" 

		ant.wldeploy(action:'undeploy',  
		name:       "SavedSearchService-6",  
		adminurl:   t3URL,  
		user:       adminUser, 
		password:   adminUserPassword, 
		verbose:    'false', 
		debug:      'true')
	}
}



task appServerRedeploy{
	dependsOn 'appServerInit' 
	doFirst {
		tasks.appServerUndeploy.execute()
	}
	doLast {
		tasks.appServerDeploy.execute()
	}
}
