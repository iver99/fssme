import org.gradle.api.plugins.jetty.internal.Monitor

apply plugin: 'war'
apply plugin: 'eclipse-wtp'
apply from: 'test.gradle'

// Directory where the restful API doc is generated
ext.restDocRootDir = "${buildDir}/restdoc" 
ext.restDocOutputDir = "${restDocRootDir}"

//Security client version
ext.emaasSecurityClientVersion = getDependentSdkVersion('com.oracle.emaas.emcpsf.sdk', 'security-client', '1.+')
ext.emaasAPIGWVersion = getDependentSdkVersion('com.oracle.emaas.emcpgw.sdk', 'gateway-client', '1.+')

tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked"
    }
configurations {
	restDoc
	
	ftpAntTask
}

war.archiveName "savedsearchcomparator-web.war"

war {
	from('src/main/java') { 
		include '**/*.properties'
		into('WEB-INF/classes') 
	}
        from('src/main/java') {
                include '**/*.xsd'
                into('WEB-INF/classes')
        }
	from('WebContent/WEB-INF') {
                include '**/web.xml'
                into('WEB-INF')
        }

}






publishing.publications {
        integTest(MavenPublication) {
                setArtifactId(project.name + '-' + integTestJar.appendix)
                setGroupId('com.oracle.emaas.emcpssf.test')
                artifact integTestJar.archivePath
        }

        thisJarPublication(MavenPublication) {
                setGroupId('com.oracle.emaas.emcpssf.test')
                artifact jar
        }
}

artifactoryPublish {
        publications('integTest')
        publications('thisJarPublication')
}

task jarMe(type: Jar) {
        from sourceSets.main.output
        baseName = "${project.archivesBaseName}"
}


/**
 * Generates documentation for the REST service API
 */  
task restDoc {
 
   
}


/**
 * FTP the REST API document to the ftp server
 */

task ftpRestDoc << {
		ant {
			taskdef(name: 'ftp',
                classname: 'org.apache.tools.ant.taskdefs.optional.net.FTP',
                classpath: configurations.ftpAntTask.asPath)
			ftp(server: ftpserver, userid: username, password: password, remotedir: remote_restdoc_dir) {
				fileset(dir: "${restDocOutputDir}")
			}
		}
	}


test {
	useTestNG()		
	{
		//We explicity include only tests annotate as s1 or s2 - they are "short-running" tests,
		//if you wish to run ALL tests within this projet - remove following.
		includeGroups 's1' ,'s2'
	}
}


dependencies {
	compile configurations.restAssured 
	providedCompile (project(':savedsearch-comparator:savedsearchcomparator-webutils')) // { transitive = false }
	providedCompile(group: 'javax.servlet', name:'servlet-api', version:'2.5') { transitive = false }
	providedCompile(group: 'com.sun.jersey', name: 'jersey-client', version: '1.17') { transitive = false }
	providedCompile(group: 'com.sun.jersey', name: 'jersey-core', version: '1.17.1') {transitive=false}
	providedCompile(group: 'com.sun.jersey.contribs', name: 'jersey-multipart', version: '1.17.1') { transitive = false }

	providedCompile(group: 'org.codehaus.jettison', name: 'jettison', version: '1.3.4') { transitive = false }
	providedCompile(group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.0') { transitive = false }

	providedCompile(group: 'org.codehaus.jackson', name: 'jackson-core-asl', version: '1.9.13') { transitive = false }
	providedCompile(group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version: '1.9.13') { transitive = false }
	providedCompile(group: 'org.codehaus.jackson', name: 'jackson-xc', version: '1.9.2') { transitive = false }
	
	providedCompile(group: 'org.apache.commons', name:'commons-lang3', version:'3.1') { transitive = false }
        providedCompile(group: 'commons-logging', name:'commons-logging', version:'1.1.1') { transitive = false }
	providedCompile(group: 'org.hamcrest', name:'hamcrest-core', version: '1.3') { transitive = false }
	providedCompile(group: 'org.apache.httpcomponents', name:'httpclient', version:'4.3.1') { transitive = false }
	providedCompile(group: 'org.apache.httpcomponents', name:'httpcore', version:'4.3') { transitive = false }
	providedCompile(group: 'org.apache.httpcomponents', name:'httpmime', version:'4.3.1') { transitive = false }
	
	providedCompile(group: 'org.codehaus.groovy', name:'groovy-all', version:'2.2.1') { transitive = false }
	
	providedCompile(group: 'com.oracle.emaas.emcpsm', name:'registry-lookup-client', version:'1.+') { transitive = false }
	providedCompile(group: 'com.oracle.emaas', name:'emaas-platform-tenant-sdk', version:'0.2') { transitive = false }
	providedCompile (group: 'com.oracle.emaas.emcpgw.sdk', name: 'gateway-client', version: "${emaasAPIGWVersion}"){ transitive = false }

	compile(group: 'com.oracle.emaas.emcpsf.sdk', name: 'security-client', version: "${emaasSecurityClientVersion}") { transitive = false }

	testCompile(group: 'javax.servlet', name:'servlet-api', version:'2.5')  { transitive = false }
	testCompile(group: 'com.sun.jersey', name: 'jersey-client', version: '1.17'){ transitive = false }
	testCompile(group: 'com.sun.jersey.contribs', name: 'jersey-multipart', version: '1.17.1'){ transitive = false }
	testCompile(group: 'org.codehaus.jettison', name: 'jettison', version: '1.3.4'){ transitive = false }
	testCompile(group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.0'){ transitive = false }

	testCompile(group: 'org.codehaus.jackson', name: 'jackson-core-asl', version: '1.9.13'){ transitive = false }
	testCompile(group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version: '1.9.13'){ transitive = false }
	testCompile(group: 'org.codehaus.jackson', name: 'jackson-xc', version: '1.9.2'){ transitive = false }
        testCompile(group: 'commons-logging', name:'commons-logging', version:'1.1.1'){ transitive = false }
	testCompile(group: 'com.oracle.emaas.emcpsm', name:'registry-lookup-client', version:'1.+'){ transitive = false }
//	testCompile(group: 'com.oracle.emaas', name:'emaas-platform-tenant-sdk', version:'0.2'){ transitive = false }
        testCompile('com.sun.jersey:jersey-servlet:1.17.1') { transitive = false }
	testCompile('com.sun.jersey:jersey-server:1.17.1') { transitive = false }


	
	ftpAntTask('org.apache.ant:ant-commons-net:12.1.2-0-0') {
			module('commons-net:commons-net:1.4.1') {
				dependencies 'oro:oro:2.0.8:jar'
			}
		}
 }

build.dependsOn integTestJar
build.dependsOn jarMe
sourceSets {
        test{
                java {
                        srcDirs = ['src/integTest/java']
                }
                resources.srcDirs = ['src/integTest/java']
        }
}
