apply plugin: 'war'
apply plugin: 'eclipse-wtp'
apply from: 'test.gradle'

ext.restDocRootDir = "${buildDir}/restdoc" 
ext.restDocOutputDir = "${restDocRootDir}"
war.archiveName "savedsearch-web.war"

configurations {
	restDoc
	enunciateCore
	ftpAntTask
}

war {
	from('src/main/java') { 
		include '**/*.properties'
		into('WEB-INF/classes') 
	}
        from('src/main/java') {
                include '**/*.xsd'
                into('WEB-INF/classes')
        }
	from('WebContent/WEB-INF') {
                include '**/web.xml'
                into('WEB-INF')
        }

}



/*
	NOTE: 
		PUBLISHING ==> We use artifactoryPublish to publish artifacts, in publications block
				we publish...
					1. integTestJar (this is the JAR containing test code)
					2. savedsearch-web jar itself - to do this, we do explicit JAR task (remember this is war project)
				The "group" of both these JARs is NOT com.oracle.emaas.emcpssf - instead 
				there's a "test" added to it - Hudson jobs prohibit publishing with root group & 
				this allows for clear separation of artifacts. 
		RESOLUTION ==> All JARs are produced & published via hudson (or otherwise) job, thus to resolve 
									 jar version correctly, we use a variable (not managed by these gradle scripts) called
									 REPO_BID - you will find we do NOT set version to these artifacts, this is intentional 
									 this allows build jobs to set version & resolve later
*/

publishing.publications {
	integTest(MavenPublication) {
		setArtifactId(project.name + '-' + integTestJar.appendix)
		setGroupId("${publishGroup}")
		artifact integTestJar.archivePath
	}
		
	thisJarPublication(MavenPublication) {
		setGroupId("${publishGroup}")
		artifact jar
	}
}

artifactoryPublish {
	publications('integTest')
	publications('thisJarPublication')
}

task jarMe(type: Jar) {
	from sourceSets.main.output
	baseName = "${project.archivesBaseName}"
}

task runQATestSuite(type: Test){
        useTestNG(){
        dependsOn ':savedsearch-ear:ear'
       useDefaultListeners = true
        outputDirectory = file("$buildDir/testngoutput")
       suites file('testngsuite.xml')
      }
}


/**
 * Generates documentation for the REST service API
 */  
task restDoc { 
	// Configure task input and output to not generate the doc again when the source file have not changed
	
	inputs.files	'src/main/java/oracle/sysman/emSDK/emaas/platform/savedsearch/ws/rest',  
								'src/main/java/oracle/sysman/emSDK/emaas/platform/savedsearch/ws/navigation'
						    outputs.dir restDocOutputDir
}
restDoc << {  
    // Declare the enunciate ant task
    ant.taskdef (name: 'enunciate', 
        classname: 'org.codehaus.enunciate.main.EnunciateTask',
        classpath: configurations.enunciateCore.asPath)
    
    // Make the directory to store enunciate output
    ant.mkdir(dir: "${restDocOutputDir}")

    // Define classpath for running enunciate
    ant.path(id:'enunciateRuntimePath') {
        pathelement(path: configurations.restDoc.asPath)
    }  

    // Run the enunciate task
    ant.enunciate(basedir: 'src/main/java/oracle/sysman/emSDK/emaas/platform/savedsearch/ws/',
            classpathRef: 'enunciateRuntimePath',
            verbose: 'true', 
            debug: 'true', 
            configFile: 'enunciate.xml',
            javacSourceVersion: '7') {
        
        include(name: '**/*.java')
	exclude(name: '*/exception')
        export(artifactId: 'docs', destination: restDocOutputDir)
        javacArgument(argument: '-g')
    }	
}

/**
 * FTP the REST API document to the ftp server
 */

task ftpRestDoc << {
		ant {
			taskdef(name: 'ftp',
                classname: 'org.apache.tools.ant.taskdefs.optional.net.FTP',
                classpath: configurations.ftpAntTask.asPath)
			ftp(server: ftpserver, userid: username, password: password, remotedir: remote_restdoc_dir) {
				fileset(dir: "${restDocOutputDir}")
			}
		}
	}

sourceSets {
	test{
		java {
			srcDirs = ['src/integTest/java']
		}
	resources.srcDirs = ['src/integTest/java']
	}
 }

test {
        useTestNG()
        {
                //We explicity include only tests annotate as s1 or s2 - they are "short-running" tests,
                //if you wish to run ALL tests within this projet - remove following.
                includeGroups 's1' ,'s2'
        }
}

dependencies {
	providedCompile project(':savedsearch-entities')
	providedCompile project(':savedsearch-core')
	providedCompile project(':savedsearch-web-utils')
	
	providedCompile getProjectArtifact('wls-api')
	providedCompile getProjectArtifact('registry-lookup-client')
	providedCompile getProjectArtifact('registry-client')
	
	providedCompile getProjectArtifact('servlet-api')
	providedCompile getProjectArtifact('jersey-client')
	providedCompile getProjectArtifact('jersey-multipart')
	providedCompile getProjectArtifact('jettison')
	
	providedCompile getProjectArtifact('log4j-core')
	providedCompile getProjectArtifact('log4j-api')

	providedCompile getProjectArtifact('jackson-core-asl')
	providedCompile getProjectArtifact('jackson-mapper-asl')
	providedCompile getProjectArtifact('jackson-xc')
	
	providedCompile getProjectArtifact('commons-lang3')
	providedCompile getProjectArtifact('hamcrest-core')
	providedCompile getProjectArtifact('httpclient')
	providedCompile getProjectArtifact('httpcore')
	providedCompile getProjectArtifact('httpmime')
	providedCompile configurations.testNG
	providedCompile configurations.webdriver
	providedCompile configurations.restAssured

	providedCompile getProjectArtifact('groovy-all')
	
	/*providedCompile(group: 'com.oracle.emaas', name: 'emaas-platform-tenant-sdk', version: '0.2') {
		exclude group: 'emaas.platform', module: 'registry-lookup-client'
		exclude group: 'emaas.platform', module: 'registry-client'
	}*/
	providedCompile getProjectArtifact('emaas-platform-tenant-sdk')
	providedCompile getProjectArtifact('enunciate-core')
	
	
	restDoc(
		getProjectArtifact('enunciate-core-rt'),
		getProjectArtifact('enunciate-core'),
		getProjectArtifact('enunciate-docs'),
		getProjectArtifact('enunciate-core-annotations'),
		getProjectArtifact('jersey-core-1.17.1'),
		getProjectArtifact('jersey-server-1.17.1'),
		getProjectArtifact('jersey-servlet-1.17.1')
	)
	
	ftpAntTask('org.apache.ant:ant-commons-net:12.1.2-0-0') {
		module('commons-net:commons-net:1.4.1') {
			dependencies 'oro:oro:2.0.8:jar'
		}
	}
	
	testCompile getProjectArtifact('jersey-servlet')
	testCompile getProjectArtifact('jersey-server')
	testCompile getProjectArtifact('jmockit')
 }

build.dependsOn integTestJar
build.dependsOn jarMe
