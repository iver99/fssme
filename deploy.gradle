/**   
* Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.   
*    
*  DESCRIPTION  
*        contains tasks for deployment preparation:  
*        - createStructure   (to use: gradle -b deploy.gradle createStructure -Pvesrion='123'  
*                                                (default version: 0.1)  
*      - parsAndCopy - pars the deploy-list.xml for getting list of files, that should be deployed   
*                                                and copy them to deployed dir  
*      - createZip - create zip file in deplGZIP folder  
*  
*  TO RUN:  
*        gradle -b deploy.gradle createStructure createZip  
*        gradle -b deploy.gradle createStructure -Pvesrion='123' createZip  (-Pvesrion='123' - optional, in hudson can be passed BUILD_NUMBER)  
*/   

defaultTasks 'createStructure'  
project.ext.defaultVer = '0.1' //default  
def curVer = hasProperty('vesrion') ? vesrion : defaultVer 
version = curVer 
group = 'emaas/applications/savedsearch' 

//create dir structure  
def createDeploymentDirectory(String ver) {
	new File("ORCLemaas/SoftwareManifest").mkdirs()  
	new File("ORCLemaas/InstalledSoftwareManifest").mkdirs()  
	new File("ORCLemaas/SoftwareManifest").mkdirs()  
	new File("ORCLemaas/InfrastructureSoftware/").mkdirs()  
	new File("ORCLemaas/Applications/savedsearchService/${ver}").mkdirs()  
}  

task createStructure << {  
	createDeploymentDirectory(curVer)  
}  

configurations {  
	archives  
} 

ext.copy = { File src,File dest->  
	def input = src.newDataInputStream()  
	def output = dest.newDataOutputStream()  
	output << input  
	input.close()  
	output.close()  
}

task  parsAndCopy (dependsOn: createStructure) << {  

	def xmlSchema = './deploy-list.xml'  
	def deployList=new XmlSlurper().parse(new File(xmlSchema))  
	deployList.children().each {   
		String str = it.attributes()  
		def values = str.split(',')  
		def split1 = values[0].split('=')  
		def curName = split1[1]  
		def split2 = values[1].split('=')  
		def curServiceName = split2[1] - '}'  

		String fileName = curName + "-" + curVer + "." + it.extension   
		def newDestination = 'ORCLemaas/' +  it.destination + '/' + curServiceName + '/' + curVer  

		def destFileSplit = fileName.split('/')  
		def destFileName = destFileSplit.last()  
		def destFileInput = newDestination + '/' + destFileName  

		File srcFile = new File(fileName)  
		if (srcFile.exists()) {  
			File destFile = new File(destFileInput)  
			copy(srcFile,destFile)  
			println "File ${srcFile} copied successfully to ${destFile}"  			
		} else {  
			println "File ${srcFile} not found"  
		}  

		def manifestFileName = 'ORCLemaas/SoftwareManifest/' + curServiceName + "-" + curVer  
		String strToAdd = ""  
		new File(manifestFileName).write(strToAdd)   
	} 
}  

task buildZip (type: Tar, dependsOn: parsAndCopy ) {  
	from 'ORCLemaas'  
	destinationDir = file("deplGZIP")  
	baseName = "ORCLemaas_grad-"+curVer 
	extension = 'tar.gz'  
	compression = Compression.GZIP
} 

artifacts {  
	archives buildZip
}
