import org.apache.tools.ant.filters.ReplaceTokens
import java.text.SimpleDateFormat
import java.util.Date
apply from: 'test.gradle'


dfversion = project.ext.getServiceVersion('SavedSearchService')
def versionPathElement = dfversion + "-"+ new SimpleDateFormat("yyMMdd.HHmmss").format(new Date())

/*
	NOTE: 
		PUBLISHING ==> We use artifactoryPublish to publish artifacts, in publications block
				we publish...
					1. integTestJar (this is the JAR containing test code)
					2. savedsearch-core jar itself
				The "group" of both these JARs is NOT com.oracle.emaas.emcpssf - instead 
				there's a "test" added to it - Hudson jobs prohibit publishing with root group & 
				this allows for clear separation of artifacts. 
		RESOLUTION ==> All JARs are produced & published via hudson (or otherwise) job, thus to resolve 
									 jar version correctly, we use a variable (not managed by these gradle scripts) called
									 REPO_BID - you will find we do NOT set version to these artifacts, this is intentional 
									 this allows build jobs to set version & resolve later
*/
 tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked"
    }
publishing.publications {
    integTest(MavenPublication) {
			setArtifactId(project.name + '-' + integTestJar.appendix)
			setGroupId("${publishGroup}")
			artifact integTestJar.archivePath
    }
    thisJarPublication(MavenPublication) {
			from project.components.java
			setGroupId("${publishGroup}")
    }
}

artifactoryPublish {
	publications('integTest')
	publications('thisJarPublication')
}

build.dependsOn integTestJar

sourceSets {
	main {
		java {
			srcDirs = ['src/main/java']
		}
		resources.srcDirs = ['src/main/java', 'src/main/resources']
	}
	test{
		java {
			srcDirs = ['src/integTest/java']
		}
		resources.srcDirs = ['src/integTest/java']
		compileClasspath += configurations.testNG
	}
}

processResources {
    from('src/main/resources') {
        include '*.properties', '*.xml'
        filter(ReplaceTokens, tokens: [version : versionPathElement])
    }
}

task runDEVTestSuite(type: Test){
        useTestNG(){        
        useDefaultListeners = true
        outputDirectory = file("$buildDir/testngoutput")
        suites file('savedsearch-core_testng_suite.xml')
        }
}

test {
        classpath = sourceSets.test.compileClasspath + sourceSets.test.output
        useTestNG()
        {
                //We explicity include only tests annotate as s1 or s2 - they are "short-running" tests,
                //if you wish to run ALL tests within this projet - remove following.
                includeGroups 's1' ,'s2'
        }
}

dependencies {
	compile project(':savedsearch-entities')
	testRuntime getProjectArtifact('ojdbc6')
	compile getProjectArtifact('log4j-core')
	compile getProjectArtifact('log4j-api')
	compile getProjectArtifact('javax.persistence')
	compile getProjectArtifact('eclipselink')
	compile getProjectArtifact('javax.transaction-api')
	compile getProjectArtifact('jettison')
	compile getProjectArtifact('jackson-core-asl')
	compile getProjectArtifact('jackson-mapper-asl')
	compile getProjectArtifact('jackson-xc')
	compile getProjectArtifact('jersey-core')
	compile getProjectArtifact('jersey-client')
	compile getProjectArtifact('jersey-json')
	compile getProjectArtifact('httpcore')
	compile getProjectArtifact('javax.ws.rs-api')
	compile getProjectArtifact('registry-client')
	compile getProjectArtifact('registry-lookup-client')
	compile getProjectArtifact('emaas-platform-tenant-sdk')
	testCompile getProjectArtifact('jmockit')
}
