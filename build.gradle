import java.util.logging.LogManager.Cleaner;
import org.gradle.api.artifacts.Configuration.State  


//ext.distDir = "${rootDir}/../../dist" 
ext.distDir = "${rootDir}/dist"  
ext.artifactPrefix = 'emaas-applications-' 
ext.projectVersion = '0.1-SNAPSHOT'  
ext.appName="${artifactPrefix}savedsearch-ear" 
ext.serviceName = "${artifactPrefix}savedsearch" 
ext.serviceInstallPath = "/opt/ORCLemaas/Applications/${serviceName}/${projectVersion}" 
ext.serviceDistDir = "${distDir}${serviceInstallPath}" 
apply plugin: 'gavsetting'
apply plugin: 'java' 
apply plugin: 'TestInfraPlugin'
allprojects {  
	apply plugin: 'artifactory-publish'
	apply plugin: 'artifactory' 
	apply plugin: 'DevInfraPlugin' 
      	apply plugin: 'maven-publish'
	apply plugin: 'TestInfraPlugin'
	ext.dependenciesDir = new File(rootDir, 'common') 
	repositories {  
		mavenLocal()  
		maven {  
			url = "${artifactory_contextUrl}" + '/emaas-virtual'  
			credentials {  
			username = "${artifactory_user}"  
			password = "${artifactory_password}"  
		} 
	}  
	} 
	
		configurations.all {
        // Exclude findbugs annotations from all configurations.
        // In the current world, this is being brought in
        // by an improperly configured registry client.  We've
        // attempted to exclude it there, but it occasionally still
        // sneaks through when some other project that includes
        // the registry client is included.  In that case,
        // the registry client's pom is reconsulted without our
        // exclusion advice, and it's back. This upsets the lawyers.
        logger.debug "Processing Configuration: $it.name, $it.state"
        if (it.state == Configuration.State.UNRESOLVED)
        {
            exclude group: 'com.google.code.findbugs', module: 'annotations'
        }
        else
        {
            logger.debug "Configuration $it.name state is $it.state so exclusion is not viable"
        }
	}
	 
}
artifactoryPublish{
	                skip = true
	}

artifactory { 
	contextUrl = "${artifactory_contextUrl}" 
	publish { 
		repository { 
			repoKey = 'emaas-sandbox-local'			
			username = "${artifactory_user}" 
			password = "${artifactory_password}" 
			maven = true 
			publishPom=true	
		} 
	} 
	resolve {  
		repository {  
			repoKey = 'emaas-virtual'  
			username = "${artifactory_user}"  
			password = "${artifactory_password}"  
			maven = true  
		} 
	}  
} 


subprojects { 
	apply plugin: 'java' 
	jar { manifest.attributes provider: 'Oracle EMaaS Applications' } 
	ext.archiveBaseName = artifactPrefix + project.name  
} 

configurations {
  prebuild_log4j { transitive = false }
  prebuild_tenant_sdk { transitive = false }
	prebuild_toplink { transitive = false }
	prebuild_servicemanager { transitive = false } 
	prebuild_savedsearch { transitive = false }
	prebuild_junit { transitive = false }
	prebuild_apacheHttp { transitive = false }
	prebuild_jaxrs { transitive = false }
	prebuild_testng { transitive = false }
	prebuild_wlfullc { transitive = false }
	compile.exclude group: "com.google.code.findbugs", module: "annotations"
}

dependencies {
		
	
	prebuild_log4j 'org.apache.logging.log4j:log4j-core:2.0.1',
                       'org.apache.logging.log4j:log4j-api:2.0.1',
			'log4j:log4j:1.2.17'
	prebuild_tenant_sdk 'com.oracle.emaas:emaas-platform-tenant-sdk:0.2'
        prebuild_toplink 'org.eclipse.persistence:eclipselink:2.4.2',
                         'org.eclipse.persistence:javax.persistence:2.0.5'
	prebuild_servicemanager 'com.oracle.emaas.emcpsm:registry-client:1.0.0+',
                                'com.oracle.emaas.emcpsm:registry-lookup-client:1.0.0+'
	prebuild_savedsearch    'com.oracle.adf:wls-api:12.1.2-0-0',
				'com.oracle.jdbc:ojdbc6:12.1.0.1.0',
				'javax.transaction:javax.transaction-api:1.2',
			//	'javax:ejb:3.2.0',
				'javax.servlet:servlet-api:2.5',
				'javax.ws.rs:javax.ws.rs-api:2.0',
				'commons-codec:commons-codec:1.6',
				'commons-logging:commons-logging:1.1.1'
	prebuild_junit 'org.hamcrest:hamcrest-core:1.3', 'junit:junit:3.8.1'
	prebuild_apacheHttp 'org.apache.httpcomponents:httpclient:4.3.1',
			    'org.apache.httpcomponents:httpcore:4.3',
			    'org.apache.httpcomponents:httpmime:4.3.1'
	prebuild_jaxrs  'org.codehaus.jackson:jackson-core-asl:1.9.13',
			'org.codehaus.jackson:jackson-mapper-asl:1.9.13',
			'org.codehaus.jackson:jackson-jaxrs:1.9.2',
			'org.codehaus.jackson:jackson-xc:1.9.2'	,		
			'com.sun.jersey:jersey-core:1.17.1',
			'com.sun.jersey:jersey-json:1.17.1', 
			'com.sun.jersey:jersey-server:1.17.1', 
			'com.sun.jersey:jersey-servlet:1.17.1',
			'org.codehaus.jettison:jettison:1.3.4'
	prebuild_testng 'org.testng:testng:6.8.8',
			'com.sun.jersey:jersey-client:1.17',
			'com.sun.jersey.contribs:jersey-multipart:1.17.1',
			'org.codehaus.groovy:groovy-all:2.2.1',
			'org.apache.commons:commons-lang3:3.1',
			'com.jayway.restassured:json-path:2.3.1',
			'com.jayway.restassured:xml-path:2.3.1',
			'com.jayway.restassured:rest-assured-common:2.3.1',
			'com.jayway.restassured:rest-assured:2.3.1'
			prebuild_wlfullc 'com.oracle.weblogic:wlfullclient:12.1.2-0-0'
}

// Copy downloaded 3rd party jars from Artifactory into the locations 
// that we are using those jars from as of now.
task preBuildCompile(type: Copy) {
   ext.afDir = new File(rootDir, 'dependencies/artifactory')   
   from configurations.prebuild_toplink
   from configurations.prebuild_log4j
   from configurations.prebuild_tenant_sdk
   from configurations.prebuild_servicemanager
   from configurations.prebuild_savedsearch
   from configurations.prebuild_junit
   from configurations.prebuild_apacheHttp
   from configurations.prebuild_jaxrs
   from configurations.prebuild_testng
   from configurations.prebuild_wlfullc
   into "$afDir"
   rename 'registry-lookup-client-1.0.0-(.*).jar', 'registry-lookup-client-1.0.0.jar'
   rename 'registry-client-1.0.0-(.*).jar', 'registry-client-1.0.0.jar'
}

compileJava.dependsOn preBuildCompile

project(':savedsearch-web'){
	configurations {
		ftpAntTask
	}
	javadoc {
        	options {
                  locale = 'en_US'
                  encoding = 'UTF-8'
                }
        source = [sourceSets.main.allJava,fileTree(dir:'../savedsearch-web/src/test'),fileTree(dir:'../savedsearch-core/src',exclude:['**/*.xml','**/*.MF']),fileTree(dir:'../savedsearch-entities/src',exclude:['**/*.xml','**/*.MF']),fileTree(dir:'../savedsearch-web-utils/src',exclude:['**/*.MF','**/*.properties']),fileTree(dir:'../savedsearch-updateutil/src',exclude:['**/*.MF','**/*.properties'])]
	}

	task ftp<<{
		ant{
                	taskdef(name:'ftp',classname: 'org.apache.tools.ant.taskdefs.optional.net.FTP',classpath:configurations.ftpAntTask.asPath)
                	ftp(server: ftpserver, userid: username, password: password, remotedir: remote_javadoc_dir){
			fileset(dir:'build/docs')
             		}	
        	}
	}
	
	dependencies{			
		compile project(':savedsearch-entities')
		compile  (group: 'com.oracle.emaas.emcpssf', name: 'savedsearch-core', version: '1.0.0+') 
				
		compile(group: 'com.oracle.adf', name: 'wls-api', version: '12.1.2-0-0')
    		compile(group: 'com.oracle.emaas.emcpsm', name: 'registry-lookup-client', version: '1.0.0+') 
		compile(group: 'com.oracle.emaas.emcpsm', name: 'registry-client', version: '1.0.0+') 
		ftpAntTask('org.apache.ant:ant-commons-net:1.8.4'){
			module('commons-net:commons-net:1.4.1'){
				dependencies 'oro:oro:2.0.8:jar'
			}
		}
	}
}

buildscript {  
	repositories {  
		mavenLocal()  
		maven {  
			url = "${artifactory_contextUrl}" + '/emaas-virtual' 
			credentials {  
			username = "${artifactory_user}"  
			password = "${artifactory_password}"  
			}  
		} 
	//	mavenCentral()  
	}

	dependencies {  
		classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:2.2.5'  
		classpath 'com.oracle.emaas.emdi:DevInfraPlugin:1.0.+'
		classpath group: 'com.oracle.emaas.emdi', name: 'TestInfraPlugin', version: "${testinfraVersion}", transitive: true
	        classpath group: 'com.oracle.emaas.emdi', name: 'GAVPlugin', version: '1.0.0+'

	}  
}


publishing {
    publications {
        // ... Your other publications here
        /* Add the MavenPublication for publishing the lrgmetadata zip
         * generated by the zipLrgMetadata task
         * NOTE: Add only when the lrgMetadataZip task is availale
         * For more details refer : https://confluence.oraclecorp.com/confluence/display/EMQA/How+to+create+LRG+in+EMaaS
         */
        if (project.tasks.findByName('lrgMetadataZip')) {
            // Publication for publishing lrg metadata
            lrgMetadata(MavenPublication) {
                groupId 'com.oracle.emaas.emcpssf.test' // You may use "groupId project.group + '.test'", if your project.group value is 'com.oracle.emaas.emcpssf'
                artifact lrgMetadataZip
                setArtifactId(lrgMetadataZip.baseName)
            }
        }
    }
    // (Optional) This is required ONLY when you wish to publish the lrgMetadata zip alone (as it is not possible with artifactoryPublish task)
    repositories {
        maven {
            name = "artifactory"
            url "${artifactory_contextUrl}/${artifactory_repoKey}"
            credentials {
                username = "${artifactory_user}"
                password =  "${artifactory_password}"
            }
        }
    }
}
artifactoryPublish {
    if (project.tasks.findByName('lrgMetadataZip')) {
        publications ('lrgMetadata')
    }
}

// Apply code coverage gradle file. Defines jacoco and sonar properties.
project.ext.set("source_cc", "${rootDir}/codeCoverage")
apply from: "${project.ext.source_cc}/codeCoverage.gradle" 
