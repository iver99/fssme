
//-----------------------------------------------------------------------------
// Enable this to be a rootProject which uses project common files.
//
// Configure the project classpath to enable applying plugins,
// and define some global project properties and methods.
// -- gradle runs the buildscript block first during the configuration phase
//
buildscript {
  if (System.env.BRANCH_TOP_DIR) {
    project.ext.commonBranchTopDir = System.env.BRANCH_TOP_DIR
  } else {
    if ( ! project.hasProperty('PUB_SHELL') || ! project.PUB_SHELL) {
      project.ext.PUB_SHELL = System.env.PUB_SHELL ?: "bash"
    }
    def command = null
    if ( ! System.env.APM_CYGWIN) {
      command = "cd '$project.rootDir' && git rev-parse --show-toplevel"
    } else {
      // cygwin support: convert to a windows path
      command = "cd '$project.rootDir' && cygpath -w `git rev-parse --show-toplevel`"
    }
    def stdout = new StringBuilder(); def stderr = new StringBuilder(); def exitCode = 1
    try {
      def proc = new ProcessBuilder("$project.PUB_SHELL", "-c", command).start()
      proc.waitForProcessOutput(stdout, stderr); exitCode = proc.exitValue()
    } catch (Exception e) { stderr << e.message }
    if (exitCode) {
      throw new GradleException(
        "[ERROR] $project.PUB_SHELL or git command is not found or $project.rootDir is not a git project dir\n" +
        "[Note] If the git command is not found, env variables BRANCH_TOP_DIR and BRANCH_NAME must be set\n" +
        "[Note] Setting the PUB_SHELL property or env variable will override the default PUB_SHELL=bash\n" +
        "[Command] $project.PUB_SHELL -c \"$command\"\n" + "[Error] $stderr")
    } else {
      project.ext.commonBranchTopDir = "$stdout".trim()
    }
  }
  apply from: "$project.commonBranchTopDir/common/scripts/buildscript-apply-delegate.gradle"
}
//
// Apply common plugins,
// configure the common publishing repository,
// configure project repositories to resolve artifact specs,
// and do other common configuration for allprojects{}.
//
def pubAllprojects = project.hasProperty('PUB_ALLPROJECTS') ?
  project.PUB_ALLPROJECTS : "$project.pubBuildscriptDir/allprojects.gradle"
apply from: new File(pubAllprojects).isAbsolute() ?
  "$pubAllprojects" : "$project.commonBranchTopDir/$pubAllprojects"
//
//-----------------------------------------------------------------------------
allprojects {
    /* The name of your repository, either hardcoded or from a property */
    project.group = "${project.baseGroup}.emcpssf"
    if (project != rootProject) {
        project.group += project.path.replaceAll(~/:/, '.')
    }
}
//apply plugin: 'DevInfraPlugin'

import org.gradle.api.artifacts.Configuration.State

ext.distDir = "${rootDir}/dist"  
ext.artifactPrefix = 'emaas-applications-' 
ext.projectVersion = '0.1-SNAPSHOT'
ext.appName="${artifactPrefix}savedsearch-ear" 
ext.serviceName = "${artifactPrefix}savedsearch" 
ext.serviceInstallPath = "/opt/ORCLemaas/Applications/${serviceName}/${projectVersion}" 
ext.serviceDistDir = "${distDir}${serviceInstallPath}" 
ext.failedTestCount = 0
def disBuildTests = System.getenv("DISABLE_BUILD_TESTS")
ext.disableBuildTests = (disBuildTests == null ? false : disBuildTests.toBoolean())
allprojects {  
	ext.dependenciesDir = new File(rootDir, 'common') 

	configurations.all {
      // Exclude findbugs annotations from all configurations.
      // In the current world, this is being brought in
      // by an improperly configured registry client.  We've
      // attempted to exclude it there, but it occasionally still
      // sneaks through when some other project that includes
      // the registry client is included.  In that case,
      // the registry client's pom is reconsulted without our
      // exclusion advice, and it's back. This upsets the lawyers.
      logger.debug "Processing Configuration: $it.name, $it.state"
      if (it.state == Configuration.State.UNRESOLVED)
      {
          exclude group: 'com.google.code.findbugs', module: 'annotations'
      }
      else
      {
          logger.debug "Configuration $it.name state is $it.state so exclusion is not viable"
      }
	}
	 
task s1tests(type: Test) {
        ignoreFailures = true
        useTestNG() {
            includeGroups 's1'
        }
        afterSuite { TestDescriptor desc, TestResult testResult ->
            logger.debug "Suite Name: ${desc.name}"
            logger.debug "Parent: ${desc.parent}"
            if (desc.parent == null)
            {
                // When at the suite completion for a task, add in failures
                project.rootProject.failedTestCount += testResult.failedCount
            }
            logger.debug "Failures: ${testResult.failedCount} / ${project.rootProject.failedTestCount}"
        }
    }
    s1tests.enabled = !project.rootProject.disableBuildTests
 
    // Run s2 test group - the second stage unit test group
    // Tests in this group are more complex and may take a longer time to run
    task s2tests(type: Test) {
        ignoreFailures = true
        useTestNG() {
            includeGroups 's2'
        }
        afterSuite { TestDescriptor desc, TestResult testResult ->
            logger.debug "Suite Name: ${desc.name}"
            logger.debug "Parent: ${desc.parent}"
            if (desc.parent == null)
            {
                // When at the suite completion for a task, add in failures
                project.rootProject.failedTestCount += testResult.failedCount
            }
            logger.debug "Failures: ${testResult.failedCount} / ${project.rootProject.failedTestCount}"
        }
    }
    s2tests.enabled = !project.rootProject.disableBuildTests
} // end of allprojects closure
 


task runS1Tests(type: Exec) {
    executable = project.gradle.gradleHomeDir.absolutePath + '/bin/gradle'
    args 'do_lrg', '-Plrgs=emcpssf_l0_test'
    if (project.hasProperty('BuildID')) {
        args "-PREPO_BID=${BuildID}"
    }
    if (project.hasProperty('ENABLE_CC')) {
        args "-PENABLE_CC=1"
    }

    finalizedBy "print_results"
}


runS1Tests.enabled = !project.disableBuildTests

//run S2 as S1 as another workaround now
task runS2Tests(type: Exec) {
    executable = project.gradle.gradleHomeDir.absolutePath + '/bin/gradle'
    args 'do_lrg', '-Plrgs=emcpssf_l1_test'
    if (project.hasProperty('BuildID')) {
        args "-PREPO_BID=${BuildID}"
    }
    if (project.hasProperty('ENABLE_CC')) {
        args "-PENABLE_CC=1"
    }
	
    finalizedBy "print_results"
}

/* this workaround doesn't work in hudson job hit "Execution failed for task ':runS2Tests'.> execCommand == null!"
 task runS2Tests(type: Exec) {
doLast {
        println "runS2Tests is not ready yet."
   }
} 
*/
runS2Tests.enabled = !project.disableBuildTests
runS2Tests.mustRunAfter(runS1Tests)


subprojects { 
	jar { manifest.attributes provider: 'Oracle EMaaS Applications' } 
	ext.archiveBaseName = artifactPrefix + project.name  
} 

configurations {
    driver
}

dependencies {
    driver group: 'com.oracle.jdbc', name: 'ojdbc7', version: '12.1.0.1.0'
}


project.publishing.publications {
    if (project.tasks.findByName('lrgMetadataZip')) {
        // Publication for publishing lrg metadata
        lrgMetadata(MavenPublication) {
            groupId "${publishGroup}"
            artifact lrgMetadataZip
            setArtifactId(lrgMetadataZip.baseName)
        }
    }
}


artifactoryPublish {
    if (project.tasks.findByName('lrgMetadataZip')) {
        publications ('lrgMetadata')
    }
}

// Apply code coverage gradle file. Defines jacoco and sonar properties.
project.ext.set("source_cc", "${rootDir}/codeCoverage")
apply from: "${project.ext.source_cc}/codeCoverage.gradle"

//-----------------------------------------------------------------------------
// Set sonar.branch property for SonarQube
//
if(project.plugins.hasPlugin('sonar-runner')) {
  sonarRunner {
    sonarProperties {
      property "sonar.branch", 'greenchannel'
    }
  }
}
//
//-----------------------------------------------------------------------------

// clean up database for Local LRG
URLClassLoader loader = GroovyObject.class.classLoader
configurations.driver.each {File file ->
    loader.addURL(file.toURL())
}

String CLEANUP_SQL = "cleanup_ssf.sql"
String db_usr = "SYSEMS_T_1010"
String db_pw = "welcome1"
String db_url_pre = "jdbc:oracle:thin:@"
String db_url_suf = ".us.oracle.com:1521:orcl12c"

task cleanUpDB4LocalLRG<<{
    if(project.hasProperty('cleanDB')) {
    	def driverName = 'oracle.jdbc.OracleDriver'
    	Class.forName(driverName)
    	def props = [user: db_usr, password: db_pw] as Properties
    	def url = db_url_pre + project.getProperty('cleanDB') + db_url_suf
    	def sql = groovy.sql.Sql.newInstance(url,props,driverName)
    	def file = new File(CLEANUP_SQL)

    	file.eachLine{
		def line=it
		if(!line.trim().isEmpty()&&!line.contains("commit"))
		{
			if(line.trim().toLowerCase().startsWith("delete"))
			{
				line=line.replace(";","")
				sql.execute(line)
				println "Successfully Executed: "+line+" , affected row count:"+sql.getUpdateCount()
			}
		}	
    	}
    	sql.close() 
	println "\t================================\n"
	println "\t     Clean up DB data done\n"
	println "\t================================"
    }
}


