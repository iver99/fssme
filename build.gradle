apply plugin: 'DevInfraPlugin'
import org.gradle.api.artifacts.Configuration.State  
 ext.regClientVer = getDependentSdkVersion('com.oracle.emaas.emcpsm', 'registry-client', '1.+')
    ext.registryClientResolver = 'com.oracle.emaas.emcpsm:registry-client:'+ regClientVer

    ext.regClientLookupVer = getDependentSdkVersion('com.oracle.emaas.emcpsm', 'registry-lookup-client', '1.+')
    ext.regClientLookupResolver = 'com.oracle.emaas.emcpsm:registry-lookup-client:' + regClientLookupVer

ext.distDir = "${rootDir}/dist"  
ext.artifactPrefix = 'emaas-applications-' 
ext.projectVersion = '0.1-SNAPSHOT'
ext.appName="${artifactPrefix}savedsearch-ear" 
ext.serviceName = "${artifactPrefix}savedsearch" 
ext.serviceInstallPath = "/opt/ORCLemaas/Applications/${serviceName}/${projectVersion}" 
ext.serviceDistDir = "${distDir}${serviceInstallPath}" 
ext.failedTestCount = 0
def disBuildTests = System.getenv("DISABLE_BUILD_TESTS")
ext.disableBuildTests = (disBuildTests == null ? false : disBuildTests.toBoolean())
allprojects {  
	apply plugin: 'java'
	apply plugin: 'artifactory-publish'
	apply plugin: 'DevInfraPlugin' 
 	apply plugin: 'maven-publish'
	apply plugin: 'TestInfraPlugin'
	apply plugin: 'gavsetting'
	ext.dependenciesDir = new File(rootDir, 'common') 
	repositories {  
		mavenLocal()  
		maven {  
			url = "${artifactory_contextUrl}/${artifactory_virtual_repoKey}"  
			credentials {  
				username = "${artifactory_user}"  
				password = "${artifactory_password}"  
			} 
		} 
	} 
	
	configurations.all {
      // Exclude findbugs annotations from all configurations.
      // In the current world, this is being brought in
      // by an improperly configured registry client.  We've
      // attempted to exclude it there, but it occasionally still
      // sneaks through when some other project that includes
      // the registry client is included.  In that case,
      // the registry client's pom is reconsulted without our
      // exclusion advice, and it's back. This upsets the lawyers.
      logger.debug "Processing Configuration: $it.name, $it.state"
      if (it.state == Configuration.State.UNRESOLVED)
      {
          exclude group: 'com.google.code.findbugs', module: 'annotations'
      }
      else
      {
          logger.debug "Configuration $it.name state is $it.state so exclusion is not viable"
      }
	}
	 
task s1tests(type: Test) {
        useTestNG() {
            ignoreFailures = true
            includeGroups 's1'
        }
        afterSuite { TestDescriptor desc, TestResult testResult ->
            logger.debug "Suite Name: ${desc.name}"
            logger.debug "Parent: ${desc.parent}"
            if (desc.parent == null)
            {
                // When at the suite completion for a task, add in failures
                project.rootProject.failedTestCount += testResult.failedCount
            }
            logger.debug "Failures: ${testResult.failedCount} / ${project.rootProject.failedTestCount}"
        }
    }
    s1tests.enabled = !project.rootProject.disableBuildTests
 
    // Run s2 test group - the second stage unit test group
    // Tests in this group are more complex and may take a longer time to run
    task s2tests(type: Test) {
        useTestNG() {
            ignoreFailures = true
            includeGroups 's2'
        }
        afterSuite { TestDescriptor desc, TestResult testResult ->
            logger.debug "Suite Name: ${desc.name}"
            logger.debug "Parent: ${desc.parent}"
            if (desc.parent == null)
            {
                // When at the suite completion for a task, add in failures
                project.rootProject.failedTestCount += testResult.failedCount
            }
            logger.debug "Failures: ${testResult.failedCount} / ${project.rootProject.failedTestCount}"
        }
    }
    s2tests.enabled = !project.rootProject.disableBuildTests
} // end of allprojects closure
 

artifactory {
    contextUrl = "${artifactory_contextUrl}"
    publish {
        repository {
            repoKey = "${artifactory_publish_repoKey}"
            username = "${artifactory_user}"
            password = "${artifactory_password}"
        }
    }
    resolve {
            repository {
                repoKey = "${artifactory_repoKey}"
                username = "${artifactory_user}"
                password = "${artifactory_password}"
                maven = true
        }
    }
}
task runS1Tests(type: Exec) {
    executable = project.gradle.gradleHomeDir.absolutePath + '/bin/gradle'
    args 'do_lrg', '-Plrgs=emcpssf_dev_test'
    if (project.hasProperty('BuildID')) {
        args "-PREPO_BID=${BuildID}"
    }
    finalizedBy "print_results"
}
 



runS1Tests.enabled = !project.disableBuildTests
 task runS2Tests(type: Exec) {
    executable project.gradle.gradleHomeDir.absolutePath + '/bin/gradle'
    args 'do_lrg', '-Plrgs=emcpssf_web_unit_test'
    if (project.hasProperty('BuildID')) {
        args "-PREPO_BID=${BuildID}"
    }
    finalizedBy "print_results"
} 

runS2Tests.enabled = !project.disableBuildTests
runS2Tests.mustRunAfter(runS1Tests)


subprojects { 
	apply plugin: 'java' 
	jar { manifest.attributes provider: 'Oracle EMaaS Applications' } 
	ext.archiveBaseName = artifactPrefix + project.name  
} 

configurations {
  testNG
  prebuild_log4j { transitive = false }
  prebuild_tenant_sdk { transitive = false }
	prebuild_toplink { transitive = false }
	prebuild_servicemanager { transitive = false } 
	prebuild_savedsearch { transitive = false }
	prebuild_junit { transitive = false }
	prebuild_apacheHttp { transitive = false }
	prebuild_jaxrs { transitive = false }
	prebuild_testng { transitive = false }
	prebuild_wlfullc { transitive = false }
	prebuild_cache { transitive = false }
	compile.exclude group: "com.google.code.findbugs", module: "annotations"
}

dependencies {	
	prebuild_log4j 'org.apache.logging.log4j:log4j-core:2.0.1',
                       'org.apache.logging.log4j:log4j-api:2.0.1',
			'log4j:log4j:1.2.17'
	prebuild_tenant_sdk 'com.oracle.emaas:emaas-platform-tenant-sdk:0.2'
        prebuild_toplink 'org.eclipse.persistence:eclipselink:2.4.2',
                         'org.eclipse.persistence:javax.persistence:2.0.5'
	prebuild_servicemanager "${registryClientResolver}",
                                "${regClientLookupResolver}"
	prebuild_savedsearch    'com.oracle.adf:wls-api:12.1.2-0-0',
				'com.oracle.jdbc:ojdbc6:12.1.0.1.0',
				'javax.transaction:javax.transaction-api:1.2',
				'javax.servlet:servlet-api:2.5',
				'javax.ws.rs:javax.ws.rs-api:2.0',
				'commons-codec:commons-codec:1.6',
				'commons-logging:commons-logging:1.1.1'
	prebuild_junit 'org.hamcrest:hamcrest-core:1.3', 'junit:junit:3.8.1'
	prebuild_apacheHttp 'org.apache.httpcomponents:httpclient:4.3.1',
			    'org.apache.httpcomponents:httpcore:4.3',
			    'org.apache.httpcomponents:httpmime:4.3.1'
	prebuild_jaxrs  'org.codehaus.jackson:jackson-core-asl:1.9.13',
			'org.codehaus.jackson:jackson-mapper-asl:1.9.13',
			'org.codehaus.jackson:jackson-jaxrs:1.9.2',
			'org.codehaus.jackson:jackson-xc:1.9.2'	,		
			'com.sun.jersey:jersey-core:1.17.1',
			'com.sun.jersey:jersey-json:1.17.1', 
			'com.sun.jersey:jersey-server:1.17.1', 
			'com.sun.jersey:jersey-servlet:1.17.1',
			'org.codehaus.jettison:jettison:1.3.4'
	prebuild_wlfullc 'com.oracle.weblogic:wlfullclient:12.1.2-0-0'
	prebuild_cache 'coherence:coherence:12.1.2'
}

// Copy downloaded 3rd party jars from Artifactory into the locations 
// that we are using those jars from as of now.
task preBuildCompile(type: Copy) {
   ext.afDir = new File(rootDir, 'dependencies/artifactory')   
   from configurations.prebuild_toplink
   from configurations.prebuild_log4j
   from configurations.prebuild_tenant_sdk
   from configurations.prebuild_servicemanager
   from configurations.prebuild_savedsearch
   from configurations.prebuild_junit
   from configurations.prebuild_apacheHttp
   from configurations.prebuild_jaxrs
   from configurations.testNG
   from configurations.prebuild_wlfullc
   from configurations.prebuild_cache
   into "$afDir"
   rename 'registry-lookup-client-1.(.*)-(.*).jar', 'registry-lookup-client-1.x.jar'
   rename 'registry-client-1.(.*)-(.*).jar', 'registry-client-1.x.jar'
}

compileJava.dependsOn preBuildCompile

buildscript {  
	repositories {  
		mavenLocal()  
		maven { 
			url = "${artifactory_contextUrl}/${artifactory_virtual_repoKey}" 
			credentials {  
			username = "${artifactory_user}"  
			password = "${artifactory_password}"  
			}  
		} 
	}

	dependencies {  
		classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:2.2.5'  
		classpath group: 'com.oracle.emaas.emdi', name: 'DevInfraPlugin', version: "${devinfraVersion}", transitive: true
		classpath group: 'com.oracle.emaas.emdi', name: 'TestInfraPlugin', version: "${testinfraVersion}", transitive: true
    classpath group: 'com.oracle.emaas.emdi', name: 'GAVPlugin', version: '1.0.0+'
	}  
}


publishing {
    publications {
        if (project.tasks.findByName('lrgMetadataZip')) {
            // Publication for publishing lrg metadata
            lrgMetadata(MavenPublication) {
                groupId 'com.oracle.emaas.emcpssf.test' 
                artifact lrgMetadataZip
                setArtifactId(lrgMetadataZip.baseName)
            }
        }
    }
    // (Optional) This is required ONLY when you wish to publish the lrgMetadata zip alone (as it is not possible with artifactoryPublish task)
    repositories {
        maven {
            name = "artifactory"
            url "${artifactory_contextUrl}/${artifactory_repoKey}"
            credentials {
                username = "${artifactory_user}"
                password =  "${artifactory_password}"
            }
        }
    }
}
artifactoryPublish {
    if (project.tasks.findByName('lrgMetadataZip')) {
        publications ('lrgMetadata')
    }
}

// Apply code coverage gradle file. Defines jacoco and sonar properties.
project.ext.set("source_cc", "${rootDir}/codeCoverage")
apply from: "${project.ext.source_cc}/codeCoverage.gradle"
